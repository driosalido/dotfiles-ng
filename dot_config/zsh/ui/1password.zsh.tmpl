# 1Password CLI Integration

{{- if .use_secrets }}
# Only configure 1Password if secrets management is enabled
if command -v op >/dev/null 2>&1; then
    
    # Enable 1Password CLI completion
    eval "$(op completion zsh)"
    compdef _op op
    
    # Common 1Password aliases
    alias opls='op item list'
    alias opget='op item get'
    alias opsearch='op item list --categories'
    alias opvault='op vault list'
    alias opwhoami='op whoami'
    alias opsignin='op signin'
    alias opsignout='op signout'
    
    # Enhanced functions for 1Password workflow
    
    # Get password for an item (interactive with fzf if available)
    oppass() {
        if [[ $# -eq 0 ]]; then
            if command -v fzf >/dev/null 2>&1; then
                local item
                item=$(op item list --format=json | jq -r '.[] | "\(.title) (\(.id))"' | fzf --prompt="Select item: ")
                if [[ -n "$item" ]]; then
                    local item_id=$(echo "$item" | sed 's/.*(\(.*\))/\1/')
                    op item get "$item_id" --fields password
                fi
            else
                echo "Usage: oppass <item-name-or-id>"
                echo "Install fzf for interactive selection"
            fi
        else
            op item get "$1" --fields password
        fi
    }
    
    # Copy password to clipboard
    opcp() {
        local password
        if [[ $# -eq 0 ]]; then
            if command -v fzf >/dev/null 2>&1; then
                local item
                item=$(op item list --format=json | jq -r '.[] | "\(.title) (\(.id))"' | fzf --prompt="Select item to copy password: ")
                if [[ -n "$item" ]]; then
                    local item_id=$(echo "$item" | sed 's/.*(\(.*\))/\1/')
                    password=$(op item get "$item_id" --fields password)
                fi
            else
                echo "Usage: opcp <item-name-or-id>"
                echo "Install fzf for interactive selection"
                return 1
            fi
        else
            password=$(op item get "$1" --fields password)
        fi
        
        if [[ -n "$password" ]]; then
            {{- if .is_macos }}
            echo -n "$password" | pbcopy
            echo "Password copied to clipboard"
            {{- else }}
            if command -v xclip >/dev/null 2>&1; then
                echo -n "$password" | xclip -selection clipboard
                echo "Password copied to clipboard"
            elif command -v wl-copy >/dev/null 2>&1; then
                echo -n "$password" | wl-copy
                echo "Password copied to clipboard"
            else
                echo "Clipboard tool not found (install xclip or wl-clipboard)"
                echo "Password: $password"
            fi
            {{- end }}
        fi
    }
    
    # Get all fields for an item in a readable format
    opshow() {
        if [[ $# -eq 0 ]]; then
            if command -v fzf >/dev/null 2>&1; then
                local item
                item=$(op item list --format=json | jq -r '.[] | "\(.title) (\(.id))"' | fzf --prompt="Select item to show: ")
                if [[ -n "$item" ]]; then
                    local item_id=$(echo "$item" | sed 's/.*(\(.*\))/\1/')
                    op item get "$item_id" --format=json | jq -r '
                        "Title: \(.title)",
                        "Category: \(.category)",
                        "Username: \(.fields[] | select(.label=="username") | .value // "N/A")",
                        "URL: \(.urls[]?.href // "N/A")",
                        "Notes: \(.fields[] | select(.label=="notes") | .value // "N/A")"
                    '
                fi
            else
                echo "Usage: opshow <item-name-or-id>"
                echo "Install fzf for interactive selection"
            fi
        else
            op item get "$1" --format=json | jq -r '
                "Title: \(.title)",
                "Category: \(.category)", 
                "Username: \(.fields[] | select(.label=="username") | .value // "N/A")",
                "URL: \(.urls[]?.href // "N/A")",
                "Notes: \(.fields[] | select(.label=="notes") | .value // "N/A")"
            '
        fi
    }
    
    # Search items by category
    opcat() {
        local category="${1:-LOGIN}"
        if command -v fzf >/dev/null 2>&1; then
            local item
            item=$(op item list --categories="$category" --format=json | jq -r '.[] | "\(.title) (\(.id))"' | fzf --prompt="Select $category item: ")
            if [[ -n "$item" ]]; then
                local item_id=$(echo "$item" | sed 's/.*(\(.*\))/\1/')
                opshow "$item_id"
            fi
        else
            op item list --categories="$category"
        fi
    }
    
    # Quick SSH key retrieval (if stored in 1Password)
    opssh() {
        if [[ $# -eq 0 ]]; then
            echo "Usage: opssh <ssh-key-item-name>"
            echo "This will retrieve an SSH private key from 1Password"
            return 1
        fi
        
        local ssh_key
        ssh_key=$(op item get "$1" --fields "private key" 2>/dev/null)
        
        if [[ -n "$ssh_key" ]]; then
            echo "$ssh_key"
        else
            echo "SSH key not found or not accessible"
            return 1
        fi
    }
    
    # Environment variable injection (useful for API keys)
    openv() {
        if [[ $# -ne 2 ]]; then
            echo "Usage: openv <item-name> <field-name>"
            echo "Example: openv 'GitHub API' token"
            return 1
        fi
        
        local value
        value=$(op item get "$1" --fields "$2" 2>/dev/null)
        
        if [[ -n "$value" ]]; then
            echo "export ${2^^}='$value'"
            echo "# Run: eval \$(openv '$1' '$2')"
        else
            echo "Field '$2' not found in item '$1'"
            return 1
        fi
    }
    
    # Quick status check
    opstatus() {
        echo "1Password CLI Status:"
        echo "===================="
        
        if op account list >/dev/null 2>&1; then
            echo "‚úÖ Signed in to 1Password"
            echo "Account: $(op whoami 2>/dev/null || echo 'Unknown')"
            echo "Vaults: $(op vault list --format=json 2>/dev/null | jq -r 'length // 0') available"
            echo "Items: $(op item list --format=json 2>/dev/null | jq -r 'length // 0') total items"
        else
            echo "‚ùå Not signed in to 1Password"
            echo "Run: op signin"
        fi
    }
    
    # Quick signin helper
    op-signin() {
        echo "üîê 1Password Sign In"
        echo "=================="
        
        # Check if already signed in
        if op whoami >/dev/null 2>&1; then
            echo "‚úÖ Already signed in as: $(op whoami)"
            return 0
        fi
        
        # Attempt to sign in
        echo "Signing in to 1Password..."
        if op signin; then
            echo "‚úÖ Successfully signed in to 1Password"
            opstatus
        else
            echo "‚ùå Failed to sign in to 1Password"
            return 1
        fi
    }

else
    # 1Password CLI not installed - provide helpful message
    echo "üí° 1Password CLI not found. To install:"
    echo "   brew install 1password-cli"
    echo "   Then run: op signin"
fi

{{- else }}
# Secrets management disabled
{{- if not .use_secrets }}
echo "üí° Secrets management is disabled. To enable 1Password integration:"
echo "   export DOTFILES_USE_SECRETS=true"
echo "   chezmoi update"
{{- end }}
{{- end }}